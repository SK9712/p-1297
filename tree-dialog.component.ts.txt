import { Component, Inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { ExpandableTreeComponent } from '../expandable-tree/expandable-tree.component';

export interface TreeDialogData {
  title?: string;
  jsonData: any;
  maxDepth?: number;
  showControls?: boolean;
  enableKeyboardNavigation?: boolean;
  allowCopy?: boolean;
  fileName?: string;
}

@Component({
  selector: 'app-tree-dialog',
  standalone: true,
  imports: [
    CommonModule,
    MatDialogModule,
    MatButtonModule,
    MatIconModule,
    MatToolbarModule,
    MatTooltipModule,
    MatSnackBarModule,
    ExpandableTreeComponent
  ],
  template: `
    <div class="tree-dialog-container">
      <!-- Dialog Header -->
      <mat-toolbar class="dialog-header" color="primary">
        <mat-icon class="header-icon">account_tree</mat-icon>
        <span class="dialog-title">{{ data.title || 'JSON Tree Viewer' }}</span>
        
        <span class="spacer"></span>
        
        <!-- Header Actions -->
        <div class="header-actions">
          <button 
            mat-icon-button 
            *ngIf="data.allowCopy !== false"
            (click)="copyToClipboard()"
            matTooltip="Copy JSON to clipboard">
            <mat-icon>content_copy</mat-icon>
          </button>
          
          <button 
            mat-icon-button 
            (click)="downloadJson()"
            matTooltip="Download JSON file">
            <mat-icon>download</mat-icon>
          </button>
          
          <button 
            mat-icon-button 
            (click)="toggleFullscreen()"
            matTooltip="Toggle fullscreen">
            <mat-icon>{{ isFullscreen ? 'fullscreen_exit' : 'fullscreen' }}</mat-icon>
          </button>
          
          <button 
            mat-icon-button 
            mat-dialog-close
            matTooltip="Close dialog">
            <mat-icon>close</mat-icon>
          </button>
        </div>
      </mat-toolbar>

      <!-- File Info Bar (if filename provided) -->
      <div class="file-info-bar" *ngIf="data.fileName">
        <mat-icon class="info-icon">description</mat-icon>
        <span class="file-name">{{ data.fileName }}</span>
        <span class="file-size">{{ getDataSize() }}</span>
      </div>

      <!-- Tree Content -->
      <div class="dialog-content" [class.fullscreen]="isFullscreen">
        <app-expandable-tree
          [jsonData]="data.jsonData"
          [maxDepth]="data.maxDepth || 10"
          [showControls]="data.showControls !== false"
          [enableKeyboardNavigation]="data.enableKeyboardNavigation !== false">
        </app-expandable-tree>
      </div>

      <!-- Dialog Actions -->
      <div class="dialog-actions" mat-dialog-actions>
        <div class="action-info">
          <mat-icon class="info-icon">info</mat-icon>
          <span class="info-text">Use arrow keys to navigate â€¢ Click nodes to select</span>
        </div>
        
        <div class="action-buttons">
          <button 
            mat-button 
            (click)="resetView()"
            matTooltip="Reset tree to initial state">
            <mat-icon>refresh</mat-icon>
            Reset View
          </button>
          
          <button 
            mat-raised-button 
            color="primary"
            mat-dialog-close="confirmed">
            <mat-icon>check</mat-icon>
            Done
          </button>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .tree-dialog-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      min-height: 500px;
      max-height: 90vh;
      width: 100%;
      min-width: 600px;
      max-width: 1200px;
    }

    .dialog-header {
      flex-shrink: 0;
      padding: 0 16px;
      min-height: 56px;
    }

    .header-icon {
      margin-right: 12px;
    }

    .dialog-title {
      font-size: 1.2rem;
      font-weight: 500;
    }

    .spacer {
      flex: 1;
    }

    .header-actions {
      display: flex;
      gap: 4px;
    }

    .file-info-bar {
      background: #f8fafc;
      border-bottom: 1px solid #e2e8f0;
      padding: 8px 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.9rem;
      color: #64748b;
      flex-shrink: 0;
    }

    .info-icon {
      font-size: 18px;
      width: 18px;
      height: 18px;
    }

    .file-name {
      font-weight: 500;
      color: #374151;
    }

    .file-size {
      margin-left: auto;
      font-family: 'JetBrains Mono', monospace;
      font-size: 0.8rem;
    }

    .dialog-content {
      flex: 1;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .dialog-content.fullscreen {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 9999;
      background: white;
    }

    .dialog-actions {
      flex-shrink: 0;
      padding: 16px;
      border-top: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: #f8fafc;
    }

    .action-info {
      display: flex;
      align-items: center;
      gap: 8px;
      color: #64748b;
      font-size: 0.85rem;
    }

    .action-buttons {
      display: flex;
      gap: 8px;
    }

    .info-text {
      font-style: italic;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .tree-dialog-container {
        min-width: 350px;
        max-width: 95vw;
      }

      .action-info {
        display: none;
      }

      .dialog-actions {
        justify-content: flex-end;
      }

      .header-actions {
        gap: 0;
      }

      .dialog-title {
        font-size: 1rem;
      }
    }

    /* Fullscreen styles */
    .dialog-content.fullscreen .tree-container {
      height: 100vh;
      max-height: none;
    }
  `]
})
export class TreeDialogComponent implements OnInit {
  isFullscreen = false;
  
  constructor(
    public dialogRef: MatDialogRef<TreeDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: TreeDialogData,
    private snackBar: MatSnackBar
  ) {}

  ngOnInit(): void {
    // Set dialog size based on content
    this.dialogRef.updateSize('80vw', '80vh');
    
    // Handle escape key for fullscreen exit
    this.dialogRef.keydownEvents().subscribe(event => {
      if (event.key === 'Escape' && this.isFullscreen) {
        this.toggleFullscreen();
        event.preventDefault();
      }
    });
  }

  copyToClipboard(): void {
    try {
      const jsonString = JSON.stringify(this.data.jsonData, null, 2);
      navigator.clipboard.writeText(jsonString).then(() => {
        this.showMessage('JSON copied to clipboard');
      }).catch(() => {
        // Fallback for older browsers
        this.fallbackCopyToClipboard(jsonString);
      });
    } catch (error) {
      this.showMessage('Failed to copy JSON', 'error');
    }
  }

  private fallbackCopyToClipboard(text: string): void {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.opacity = '0';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
      document.execCommand('copy');
      this.showMessage('JSON copied to clipboard');
    } catch (error) {
      this.showMessage('Failed to copy JSON', 'error');
    }
    
    document.body.removeChild(textArea);
  }

  downloadJson(): void {
    try {
      const jsonString = JSON.stringify(this.data.jsonData, null, 2);
      const blob = new Blob([jsonString], { type: 'application/json' });
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = this.data.fileName || 'data.json';
      link.style.display = 'none';
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      window.URL.revokeObjectURL(url);
      this.showMessage('JSON file downloaded');
    } catch (error) {
      this.showMessage('Failed to download JSON', 'error');
    }
  }

  toggleFullscreen(): void {
    this.isFullscreen = !this.isFullscreen;
    
    if (this.isFullscreen) {
      this.dialogRef.updateSize('100vw', '100vh');
    } else {
      this.dialogRef.updateSize('80vw', '80vh');
    }
  }

  resetView(): void {
    // This would reset the tree to its initial state
    // You could emit an event to the tree component or recreate it
    this.showMessage('Tree view reset');
  }

  getDataSize(): string {
    try {
      const jsonString = JSON.stringify(this.data.jsonData);
      const sizeInBytes = new Blob([jsonString]).size;
      
      if (sizeInBytes < 1024) {
        return `${sizeInBytes} B`;
      } else if (sizeInBytes < 1024 * 1024) {
        return `${(sizeInBytes / 1024).toFixed(1)} KB`;
      } else {
        return `${(sizeInBytes / (1024 * 1024)).toFixed(1)} MB`;
      }
    } catch (error) {
      return 'Unknown size';
    }
  }

  private showMessage(message: string, type: 'success' | 'error' = 'success'): void {
    this.snackBar.open(message, 'Close', {
      duration: 3000,
      panelClass: type === 'error' ? 'error-snack' : 'success-snack',
      horizontalPosition: 'end',
      verticalPosition: 'bottom'
    });
  }

  onNoClick(): void {
    this.dialogRef.close();
  }
}